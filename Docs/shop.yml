swagger: "2.0"
info:
  description: "This is a sample e-trade backend server.  "
  version: "1.0.0"
  title: "Swagger Shopping Cart"
  termsOfService: "http://swagger.io/terms/"
  contact:
    email: "gcamlicali@gmail.com"
  license:
    name: "Apache 2.0"
    url: "http://www.apache.org/licenses/LICENSE-2.0.html"
basePath: "/api/v1/trade-cart-api"
tags:
  - name: "user"
    description: "User authorization operations"
  - name: "product"
    description: "Product operations"
  - name: "category"
    description: "Category operations"
  - name: "cart"
    description: "User cart operations"
  - name: "order"
    description: "User order operations"


schemes:
  - "https"
  - "http"
paths:
  /user/signup:
    post:
      tags:
        - "user"
      summary: "Create user"
      description: "This can only be done by new user."
      operationId: "createUser"
      produces:
        - "application/json"
      parameters:
        - in: "body"
          name: "body"
          description: "Created user object"
          required: true
          schema:
            $ref: "#/definitions/User"
      responses:
        default:
          description: "successful operation"
  /user/singin:
    post:
      tags:
        - "user"
      summary: "Logs user into the system"
      description: ""
      operationId: "loginUser"
      produces:
        - "application/xml"
        - "application/json"
      parameters:
        - in: "body"
          name: "body"
          description: "Default Customer log in"
          required: true
          schema:
            $ref: "#/definitions/Login"
      responses:
        "200":
          description: "successful operation"
          schema:
            type: "string"
          headers:
            X-Rate-Limit:
              type: "integer"
              format: "int32"
              description: "calls per hour allowed by the user"
            X-Expires-After:
              type: "string"
              format: "date-time"
              description: "date in UTC when token expires"
        "400":
          description: "Invalid username/password supplied"

  /product/:
    get:
      tags:
        - "product"
      summary: "List all products"
      description: ""
      operationId: "getProducts"
      produces:
        - "application/json"
      parameters: [ ]
      responses:
        "200":
          description: "successful operation"

          schema:
            $ref: "#/definitions/Product"

  /product/name/{SearchName}:
    get:
      tags:
        - "product"
      summary: "Search by given string in products"
      description: ""
      operationId: "getProductsByName"
      produces:
        - "application/json"
      parameters:
        - name: "SearchName"
          in: "path"
          description: "SKU of product"
          required: true
          type: "string"
      responses:
        "200":
          description: "successful operation"
          schema:
            $ref: "#/definitions/Product"

  /product/sku/{SearchSKU}:
    get:
      tags:
        - "product"
      summary: "Search by given string in products"
      description: ""
      operationId: "getProductbySKU"
      produces:
        - "application/json"
      parameters:
        - name: "SearchSKU"
          in: "path"
          description: "SKU of product"
          required: true
          type: "integer"
      responses:
        "200":
          description: "successful operation"
          schema:
            $ref: "#/definitions/Product"

  /product/signed/singleItem:
    post:
      tags:
        - "product"
      summary: "Add a product"
      description: ""
      operationId: "addSingleProduct"
      produces:
        - "application/json"
      parameters:
        - in: "body"
          name: "body"
          required: true
          schema:
            $ref: "#/definitions/Product"
      responses:
        "200":
          description: "successful operation"

  /product/signed/bulkItems:
    post:
      tags:
        - "product"
      summary: "Add bulk products"
      description: "Add from csv file"
      operationId: "addBulkProducts"
      consumes:
        - "multipart/form-data"
      produces:
        - "application/json"
      parameters:
        - in: "formData"
          name: "body"
          required: true
          type: "file"
      responses:
        "200":
          description: "successful operation"

  /product/signed/{ProductSKU}:
    put:
      tags:
        - "product"
      summary: "Update product properties"
      description: ""
      operationId: "updateProduct"
      produces:
        - "application/json"
      parameters:
        - name: "ProductSKU"
          in: "path"
          description: "SKU of product"
          required: true
          type: "integer"
          format: "int64"
        - in: "body"
          name: "body"
          required: true
          schema:
            $ref: "#/definitions/Product"
      responses:
        "200":
          description: "successful operation"
          schema:
            $ref: "#/definitions/Product"
    delete:
      tags:
        - "product"
      summary: "Delete the Product"
      description: "Deletes given SKU of product"
      operationId: "deleteProduct"
      produces:
        - "application/json"
      parameters:
        - name: "ProductSKU"
          in: "path"
          description: "SKU of product"
          required: true
          type: "integer"
          format: "int64"
      responses:
        "200":
          description: "successful operation"
  /category/:
    get:
      tags:
        - "category"
      summary: "List all categories"
      description: ""
      operationId: "getCategories"
      produces:
        - "application/json"
      parameters: [ ]
      responses:
        "200":
          description: "successful operation"

          schema:
            $ref: "#/definitions/Category"


  /category/signed/singleItem:
    post:
      tags:
        - "category"
      summary: "Add a category"
      description: ""
      operationId: "addSingleCategory"
      produces:
        - "application/json"
      parameters:
        - in: "body"
          name: "body"
          required: true
          schema:
            $ref: "#/definitions/Category"
      responses:
        "200":
          description: "successful operation"

  /category/signed/bulkItems:
    post:
      tags:
        - "category"
      summary: "Add bulk categories"
      description: "Add from csv file"
      operationId: "addBulkCategories"
      consumes:
        - "multipart/form-data"
      produces:
        - "application/json"
      parameters:
        - in: "body"
          name: "body"
          required: true
          schema:
            $ref: "#/definitions/Category"
      responses:
        "200":
          description: "successful operation"

  /category/signed/{CategoryName}:
    put:
      tags:
        - "category"
      summary: "Update category properties"
      description: ""
      operationId: "updateCategory"
      produces:
        - "application/json"
      parameters:
        - name: "CategoryName"
          in: "path"
          description: "Name of category"
          required: true
          type: "string"
        - in: "body"
          name: "body"
          required: true
          schema:
            $ref: "#/definitions/Category"
      responses:
        "200":
          description: "successful operation"
          schema:
            $ref: "#/definitions/Category"
    delete:
      tags:
        - "category"
      summary: "Delete the Category"
      description: "Deletes given id category"
      operationId: "deleteCategory"
      produces:
        - "application/json"
      parameters:
        - name: "CategoryName"
          in: "path"
          description: "Name of category"
          required: true
          type: "string"
      responses:
        "200":
          description: "successful operation"

  /cart:
    get:
      tags:
        - "cart"
      summary: "Show user cart"
      description: "Show user added products"
      produces:
        - "application/json"
      parameters: []
      responses:
        "200":
          description: "successful operation"
          schema:
            $ref: "#/definitions/Cart"


  /cart/{ProductSKU}:
    post:
      tags:
        - "cart"
      summary: "Add item to cart"
      description: "Add given id product to cart"
      produces:
        - "application/json"
      parameters:
        - name: "ProductSKU"
          in: "path"
          description: "ID of product that want to add to cart"
          required: true
          type: "integer"
          format: "int64"
      responses:
        "200" :
          description: "successful operation"
          schema:
            $ref: "#/definitions/Cart"
        "405":
          description: "Invalid input"
    put:
      tags:
        - "cart"
      summary: "Update item quantity in cart"
      description: "Update given id product quantity in cart"
      consumes:
        - "application/x-www-form-urlencoded"
      produces:
        - "application/json"
      parameters:
        - name: "ProductSKU"
          in: "path"
          description: "ID of product that want to update quantity in cart"
          required: true
          type: "integer"
          format: "int64"
        - name: "quantity"
          in: "formData"
          description: "Amount of wanted item"
          required: true
          type: "string"
      responses:
        "200" :
          description: "successful operation"
          schema:
            $ref: "#/definitions/Cart"
        "405":
          description: "Invalid input"
    delete:
      tags:
        - "cart"
      summary: "Delete item from cart"
      description: "Delete given id product from cart"
      produces:
        - "application/json"
      parameters:
        - name: "ProductSKU"
          in: "path"
          description: "ID of product that want to delete from cart"
          required: true
          type: "integer"
          format: "int64"
      responses:
        "200" :
          description: "successful operation"
          schema:
            $ref: "#/definitions/Cart"
        "405":
          description: "Invalid input"
  /order:
    get:
      tags:
        - "order"
      summary: "Show all orders"
      description: "Show order history"
      produces:
        - "application/json"
      parameters: []
      responses:
        "200":
          description: "successful operation"
          schema:
            $ref: "#/definitions/Order"
    post:
      tags:
        - "order"
      summary: "Order the current cart"
      description: "Order the current cart"
      produces:
        - "application/json"
      parameters: []
      responses:
        "200":
          description: "successful operation"
          schema:
            $ref: "#/definitions/Order"

  /order/{orderID}:
    delete:
      tags:
        - "order"
      summary: "Cancel given ID order"
      produces: []
      parameters:
        - name: "orderID"
          in: "path"
          description: "ID of order that want to cancel "
          required: true
          type: "integer"
      responses:
        "200":
          description: "order cancelled"

definitions:
  Cart:
    type: "object"
    properties:
      id:
        type: "string"
      cart_items:
        type: "array"
        items:
          $ref: "#/definitions/Cart_Item"
      totalPrice:
        type: "integer"
        format: "int32"
  Cart_Item:
    type: "object"
    properties:
      quantity:
        type: "integer"
        format: "int32"
      price:
        type: "integer"
        format: "int32"
      product:
        $ref: "#/definitions/Product"
  Category:
    type: "object"
    required:
      - "name"
    properties:
      name:
        type: "string"
  Order:
    type: "object"
    properties:
      id:
        type: "string"
      cart_id:
        type: "string"
      user_id:
        type: "string"
      status:
        type: "string"
      total_price:
        type: "integer"
        format: "int32"
  Product:
    type: "object"
    required:
      - "category_name"
      - "name"
      - "sku"
      - "price"
      - "unitStock"
    properties:
      category_name:
        type: "string"
      name:
        type: "string"
      sku:
        type: "integer"
        format: "int64"
      description:
        type: "string"
      price:
        type: "integer"
        format: "int32"
      unitStock:
        type: "integer"
        format: "int32"
  ProductUp:
    type: "object"
    properties:
      category_name:
        type: "string"
      name:
        type: "string"
      sku:
        type: "integer"
        format: "int64"
      description:
        type: "string"
      price:
        type: "integer"
        format: "int32"
      unitStock:
        type: "integer"
        format: "int32"
  User:
    type: "object"
    required:
      - "firstName"
      - "lastName"
      - "email"
      - "password"
    properties:
      id:
        type: "integer"
        format: "int64"
      firstName:
        type: "string"
      lastName:
        type: "string"
      email:
        type: "string"
      password:
        type: "string"
      phone:
        type: "string"
      isAdmin:
        type: "boolean"
  ItemQuantity:
    type: "object"
    required:
      - "quantity"
    properties:
      quantity:
        type: "integer"
        format: "int32"
  Login:
    type: "object"
    required:
      - email
      - password
    properties:
      email:
        type: "string"
      password:
        type: "string"
  ApiResponse:
    type: "object"
    properties:
      code:
        type: "integer"
      message:
        type: "string"
      details:
        description: a (key, value) map.
        type: object
